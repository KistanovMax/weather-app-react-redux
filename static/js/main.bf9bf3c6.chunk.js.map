{"version":3,"sources":["components/SearchPanel/SearchPanel.js","actions/fetchWeather.js","actions/fetchForecast.js","components/WeatherCard/WeatherCard.js","components/ForecastItem/ForecastItem.js","components/ForecastCard/ForecastCard.js","actions/pressForecastItem.js","components/DataCard/DateCard.js","components/App/App.js","reducers/forecastReducer2.js","reducers/weatherReducer2.js","reducers/reducers.js","store/store.js","index.js"],"names":["SearchPanel","useState","city","setCity","dispatch","useDispatch","getWeather","cityName","API","fetch","then","res","json","result","type","payload","name","country","sys","temp","main","icon","weather","description","catch","err","console","log","getForecast","pressEnter","useCallback","event","keyCode","target","value","useEffect","className","onKeyDown","placeholder","width","height","viewBox","fill","xmlns","fillRule","d","React","memo","WeatherCard","weatherSelector","useSelector","state","Weather","cod","Math","round","src","alt","Spinner","animation","variant","ForecastItem","month","day","hour","clickItem","date","Date","currentDate","getDate","getMonth","forecastDate","onClick","ForecastCard","forecastSelector","Forecast","forecast","pressForecastItem","list","map","item","dt_txt","slice","dt","DateCard","getFullYear","currentWeekDay","getDay","App","fetchForecast","action","fetchWeather","reducers","combineReducers","forecastReducer2","weatherReducer2","middleware","applyMiddleware","thunk","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf9bf3c6.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport './SearchPanel.css';\r\n\r\nimport { fetchWeather } from '../../actions/fetchWeather';\r\nimport { fetchForecast } from '../../actions/fetchForecast';\r\n\r\nfunction SearchPanel() {\r\n  const [city, setCity] = useState('Washington');\r\n\r\n  const dispatch = useDispatch();\r\n  const getWeather = (city) => dispatch(fetchWeather(city));\r\n  const getForecast = (city) => dispatch(fetchForecast(city));\r\n\r\n  const pressEnter = useCallback(\r\n    (event) => {\r\n      if (event.keyCode === 13) {\r\n        setCity(event.target.value);\r\n      }\r\n    },\r\n    [setCity]\r\n  );\r\n\r\n  useEffect(() => {\r\n    getWeather(city);\r\n    getForecast(city);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [city]);\r\n\r\n  return (\r\n    <div>\r\n      <div className='search-panel'>\r\n        <input\r\n          onKeyDown={pressEnter}\r\n          className='search'\r\n          type='text'\r\n          placeholder='Enter city'\r\n        />\r\n        <svg\r\n          width='1.5em'\r\n          height='1.5em'\r\n          viewBox='0 0 16 16'\r\n          className='bi bi-search'\r\n          fill='white'\r\n          xmlns='http://www.w3.org/2000/svg'\r\n        >\r\n          <path\r\n            fillRule='evenodd'\r\n            d='M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z'\r\n          />\r\n          <path\r\n            fillRule='evenodd'\r\n            d='M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z'\r\n          />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(SearchPanel);\r\n","export function fetchWeather(cityName) {\r\n  return function (dispatch) {\r\n    const API = {\r\n      key: '4778a72e106d124b8c8551777889dd53',\r\n      base: 'https://api.openweathermap.org/data/2.5/',\r\n    };\r\n\r\n    fetch(\r\n      `${API.base}weather?q=${cityName}&units=metric&appid=${API.key}`\r\n    )\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        // console.log(result);\r\n        dispatch({\r\n          type: 'FETCH_WEATHER',\r\n          payload: (result = {\r\n            name: result.name,\r\n            country: result.sys.country,\r\n            temp: result.main.temp,\r\n            icon: result.weather[0].icon,\r\n            description: result.weather[0].main,\r\n          }),\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n}\r\n","export function fetchForecast(cityName) {\r\n  return function (dispatch) {\r\n    const API = {\r\n      key: '4778a72e106d124b8c8551777889dd53',\r\n      base: 'https://api.openweathermap.org/data/2.5/',\r\n    };\r\n\r\n    fetch(\r\n      `${API.base}forecast?q=${cityName}&units=metric&appid=${API.key}`\r\n    )\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((result) => {\r\n        // console.log(result);\r\n        dispatch({\r\n          type: 'FETCH_FORECAST',\r\n          payload: result,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport './WeatherCard.css';\r\n\r\nexport default function WeatherCard() {\r\n  const weatherSelector = useSelector(\r\n    (state) => state.Weather.weather\r\n  );\r\n\r\n  if (weatherSelector.cod === '400') {\r\n    return (\r\n      <div className='error-400'>\r\n        <div className='frown-emoji'>\r\n          <svg\r\n            width='1.5em'\r\n            height='1.5em'\r\n            viewBox='0 0 16 16'\r\n            className='bi bi-emoji-frown'\r\n            fill='currentColor'\r\n            xmlns='http://www.w3.org/2000/svg'\r\n          >\r\n            <path\r\n              fillRule='evenodd'\r\n              d='M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z'\r\n            />\r\n            <path\r\n              fillRule='evenodd'\r\n              d='M4.285 12.433a.5.5 0 0 0 .683-.183A3.498 3.498 0 0 1 8 10.5c1.295 0 2.426.703 3.032 1.75a.5.5 0 0 0 .866-.5A4.498 4.498 0 0 0 8 9.5a4.5 4.5 0 0 0-3.898 2.25.5.5 0 0 0 .183.683z'\r\n            />\r\n            <path d='M7 6.5C7 7.328 6.552 8 6 8s-1-.672-1-1.5S5.448 5 6 5s1 .672 1 1.5zm4 0c0 .828-.448 1.5-1 1.5s-1-.672-1-1.5S9.448 5 10 5s1 .672 1 1.5z' />\r\n          </svg>\r\n        </div>\r\n        Sorry, the specified city was not found..\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className='weather-card'>\r\n        {weatherSelector.country ? (\r\n          <div>\r\n            <div className='city'>\r\n              <svg\r\n                width='0.8em'\r\n                height='0.8em'\r\n                viewBox='0 0 16 16'\r\n                className='bi bi-geo-alt-fill'\r\n                fill='currentColor'\r\n                xmlns='http://www.w3.org/2000/svg'\r\n              >\r\n                <path\r\n                  fillRule='evenodd'\r\n                  d='M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 0 0-6 3 3 0 0 0 0 6z'\r\n                />\r\n              </svg>\r\n              {weatherSelector.name}{' '}\r\n              <sup>{weatherSelector.country}</sup>\r\n            </div>\r\n            <div>\r\n              <div className='weather'>\r\n                <div className='temperature'>\r\n                  {Math.round(weatherSelector.temp)}\r\n                  <span>&deg;</span>\r\n                </div>\r\n                <div className='weather-type'>\r\n                  <img\r\n                    className='weather-icon'\r\n                    src={`http://openweathermap.org/img/wn/${weatherSelector.icon}@2x.png`}\r\n                    alt='weather-icon'\r\n                  />\r\n                  <div className='weather-main'>\r\n                    {weatherSelector.description}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className='spinner'>\r\n            <Spinner animation='border' variant='light' />{' '}\r\n            <div className='spinner-text'>Loading</div>\r\n            <div className='spinner-text-2'>\r\n              *perhaps you entered an invalid request\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './ForecastItem.css';\r\n\r\nexport default function ForecastItem({\r\n  name,\r\n  country,\r\n  temp,\r\n  icon,\r\n  month,\r\n  day,\r\n  hour,\r\n  description,\r\n  clickItem,\r\n}) {\r\n  const date = new Date();\r\n  const currentDate = `${\r\n    date.getDate() < 10 ? '0' + date.getDate() : date.getDate()\r\n  }.${date.getMonth() + 1}`;\r\n  let forecastDate = `${day}.${month}`;\r\n\r\n  if (forecastDate === currentDate) {\r\n    forecastDate = 'Today';\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onClick={() =>\r\n        clickItem(name, country, temp, icon, description)\r\n      }\r\n      className='forecast-item'\r\n    >\r\n      <div className='forecast-item-date'>{forecastDate}</div>\r\n      <div className='forecast-item-time'>\r\n        {hour}\r\n        <sup> 00</sup>\r\n      </div>\r\n      <div className='forecast-item-temperature'>{temp}&deg;</div>\r\n      <img\r\n        className='forecast-item-icon'\r\n        src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n        alt='weather-icon'\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport ForecastItem from '../ForecastItem/ForecastItem';\r\nimport './ForecastCard.css';\r\n\r\nimport { pressForecastItem } from '../../actions/pressForecastItem';\r\n\r\nexport default function ForecastCard() {\r\n  const forecastSelector = useSelector(\r\n    (state) => state.Forecast.forecast\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n  const clickItem = (name, country, temp, icon, description) =>\r\n    dispatch(\r\n      pressForecastItem(name, country, temp, icon, description)\r\n    );\r\n\r\n  const { city, list } = forecastSelector;\r\n\r\n  if (forecastSelector.cod === '400') {\r\n    return <div className='forecast-error-400'></div>;\r\n  } else {\r\n    return (\r\n      <div>\r\n        {city ? (\r\n          <div className='forecast-card'>\r\n            {list.map((item) => (\r\n              <ForecastItem\r\n                name={city.name}\r\n                country={city.country}\r\n                key={item.dt}\r\n                temp={Math.round(item.main.temp)}\r\n                description={item.weather[0].main}\r\n                icon={item.weather[0].icon}\r\n                month={item.dt_txt.slice(5, 7)}\r\n                day={item.dt_txt.slice(8, 10)}\r\n                hour={item.dt_txt.slice(11, 13) * 1}\r\n                clickItem={clickItem}\r\n              />\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className='forecast-spinner'></div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export const pressForecastItem = (\r\n  name,\r\n  country,\r\n  temp,\r\n  icon,\r\n  description\r\n) => {\r\n  // console.log(`clicked ${name} ${country} ${temp} ${icon} ${description}`);\r\n  return {\r\n    type: 'PRESS_FORECAST_ITEM',\r\n    payload: { name, country, temp, icon, description },\r\n  };\r\n};\r\n\r\n// name, country, temp, icon, description\r\n","import React from 'react';\r\nimport './DateCard.css';\r\n\r\nexport default function DateCard() {\r\n  const monthArr = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December',\r\n  ];\r\n  const weekDayArr = [\r\n    'Sunday',\r\n    'Monday',\r\n    'Tuesday',\r\n    'Wednesday',\r\n    'Thursday',\r\n    'Friday',\r\n    'Saturday',\r\n  ];\r\n  const date = new Date();\r\n  const currentDate = `${date.getDate()} ${\r\n    monthArr[date.getMonth()]\r\n  } ${date.getFullYear()}`;\r\n  const currentWeekDay = weekDayArr[date.getDay()];\r\n\r\n  return (\r\n    <div className='date-card'>\r\n      <div className='date-group'>\r\n        <div className='week-day'>{currentWeekDay}</div>\r\n        <div className='date'>{currentDate}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport SearchPanel from '../SearchPanel/SearchPanel';\nimport WeatherCard from '../WeatherCard/WeatherCard';\nimport ForecastCard from '../ForecastCard/ForecastCard';\nimport DateCard from '../DataCard/DateCard';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div className='container night'>\n      <SearchPanel />\n      <WeatherCard />\n      <ForecastCard />\n      <DateCard />\n    </div>\n  );\n}\n\n// container\n// container night\n","const fetchForecast = (state = { forecast: {} }, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_FORECAST':\r\n      return (state = {\r\n        ...state,\r\n        forecast: action.payload,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default fetchForecast;\r\n","const fetchWeather = (\r\n  state = {\r\n    weather: {},\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case 'FETCH_WEATHER':\r\n      return (state = {\r\n        ...state,\r\n        weather: action.payload,\r\n      });\r\n    case 'PRESS_FORECAST_ITEM':\r\n      return (state = {\r\n        ...state,\r\n        weather: action.payload,\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default fetchWeather;\r\n","import { combineReducers } from 'redux';\r\nimport forecastReducer2 from './forecastReducer2';\r\nimport weatherReducer2 from './weatherReducer2';\r\n\r\nconst reducers = combineReducers({\r\n  Forecast: forecastReducer2,\r\n  Weather: weatherReducer2,\r\n});\r\n\r\nexport default reducers;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducers from '../reducers/reducers';\r\n\r\nconst middleware = applyMiddleware(thunk);\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  composeWithDevTools(middleware)\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}